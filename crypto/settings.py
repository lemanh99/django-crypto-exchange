"""
Django settings for crypto project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import environ
# Build paths inside the project like this: BASE_DIR / 'subdir'.
from corsheaders.defaults import default_headers

BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
env.read_env(str(BASE_DIR / ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'djoser',
    'drf_spectacular',
    'corsheaders',
    'crypto.core',
    'crypto.binance'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# Django Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ["crypto.core.authentication.CustomJWTAuthentication"],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_PARSER_CLASSES": ["rest_framework.parsers.JSONParser"],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "crypto.core.exceptions.rest_framework_exception.exception_handler",
}

ROOT_URLCONF = 'crypto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'crypto/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crypto.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env.str('DB_ENGINE'),
        'NAME': env.str('DB_NAME'),
        'USER': env.str('DB_USER'),
        'PASSWORD': env.str('DB_PASSWORD'),
        'HOST': env.str('DB_HOST'),
        'PORT': env.int('DB_PORT'),
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0; SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_HEADER_TYPES = ("Bearer",)

UPDATE_LAST_LOGIN = True

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=60),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'USER_AUTHENTICATION_RULE': 'crypto.core.authentication.default_user_authentication_rule',
    'UPDATE_LAST_LOGIN': False,
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
]

# ---------------------------------------------------------------------------- #
#                                    LOGS                                      #
# ---------------------------------------------------------------------------- #
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '{asctime} {process:d} {thread:d} {levelname} {funcName} {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': env.str('LOGGING_CONSOLE_LEVEL', default='INFO'),
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': "INFO",
            'propagate': True,
        },
        'CrossCloud': {
            'handlers': ['console'],
            'level': env.str('LOGGING_CONSOLE_LEVEL', default='INFO'),
            'propagate': True,
        }
    },
}

# ---------------------------------------------------------------------------- #
#                                    CORS                                      #
# ---------------------------------------------------------------------------- #
CORS_URLS_REGEX = r"^/api/v1/.*$"
CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", default=False)
CORS_ALLOW_HEADERS = list(default_headers) + env.list("CORS_ALLOW_HEADERS")
CORS_ALLOWED_ORIGIN_REGEXES = env.list("CORS_ALLOWED_ORIGIN_REGEXES")
CORS_EXPOSE_HEADERS = env.list("CORS_EXPOSE_HEADERS")

# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = str(BASE_DIR / "media")

if not os.path.exists(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)

# https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = "/media/"

# ---------------------------------------------------------------------------- #
#                                 SWAGGER                                      #
# ---------------------------------------------------------------------------- #
SPECTACULAR_SETTINGS = {
    'SCHEMA_PATH_PREFIX': '/api/v[0-9]',
    'VERSION': 'v1',
    'SWAGGER_UI_SETTINGS': {
        'filter': True,
        'displayOperationId': True,
        'defaultModelRendering': 'model',
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'TITLE': 'Crypto API',
    'DESCRIPTION': 'The <code>swagger-ui</code> view can be found <a rel="noopener noreferrer" target="_blank" href="/">here</a><br>'
                   'The <code>ReDoc</code> view can be found <a rel="noopener noreferrer" target="_blank" href="/schema/redoc">here</a><br>'
}
# ---------------------------------------------------------------------------- #
#                                    BINANCE                                   #
# ---------------------------------------------------------------------------- #
BINANCE_CRYPTOCURRENCY_EXCHANGE_KEY = env.str('BINANCE_CRYPTOCURRENCY_EXCHANGE_KEY')
BINANCE_CRYPTOCURRENCY_EXCHANGE_SECRET = env.str('BINANCE_CRYPTOCURRENCY_EXCHANGE_SECRET')
# ---------------------------------------------------------------------------- #
#                                    POLONIEX                                  #
# ---------------------------------------------------------------------------- #
POLONIEX_CRYPTOCURRENCY_EXCHANGE_KEY = env.str('POLONIEX_CRYPTOCURRENCY_EXCHANGE_KEY')
POLONIEX_CRYPTOCURRENCY_EXCHANGE_SECRET = env.str('POLONIEX_CRYPTOCURRENCY_EXCHANGE_SECRET')
# ---------------------------------------------------------------------------- #
#                                    ETHERSCAN                                  #
# ---------------------------------------------------------------------------- #
ETHERSCAN_API_KEY = env.str('ETHERSCAN_API_KEY', '')
# ---------------------------------------------------------------------------- #
#                                    BLOCKCHAIR                                  #
# ---------------------------------------------------------------------------- #
BLOCKCHAIR_API_KEY = env.str('BLOCKCHAIR_API_KEY', '')